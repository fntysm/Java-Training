encapsulation: when we group of related variables and functions: object
variables: propreties // fields
functions: methods


abstraction;
inheritance: eliminate redandant code
Polymorphism: many forms
a technique to get rid off if else and switch statements
use the same method differently to different objects

Creating an Object in Java: 
className object = new className();

// for Bicycle class
Bicycle sportsBicycle = new Bicycle();


Inheritance: 
In overriding, the super keyword is used to call the method of the parent class in the child class: super.method()

We can also use the super keyword to call the constructor of the superclass from the constructor of the subclass.

Method overriding is also known as runtime polymorphism. Hence, we can achieve Polymorphism in Java with the help of inheritance.

Types of inheritance:
In single inheritance, a single subclass extends from a single superclass.
In multilevel inheritance, a subclass extends from a superclass and then the same subclass acts as a superclass for another class. 
In hierarchical inheritance, multiple subclasses extend from a single superclass.
In multiple inheritance, a single subclass extends from multiple superclasses.
Java doesn't support multiple inheritance. However, we can achieve multiple inheritance using interfaces.
Hybrid inheritance is a combination of two or more types of inheritance

Java Overriding Rules:
Both the superclass and the subclass must have the same method name, the same return type and the same parameter list.
We cannot override the method declared as final and static.
We should always override abstract methods of the superclass : 

The abstract class in Java cannot be instantiated (we cannot create objects of abstract classes). We use the abstract keyword 
to declare an abstract class. For example,

// create an abstract class
abstract class Language {
  // fields and methods
}
...

// try to create an object Language
// throws an error
Language obj = new Language(); 
A method that doesn't have its body is known as an abstract method. We use the same abstract keyword to create abstract methods.
if a class contains an abstract method, then the class should be declared abstract. Otherwise, it will generate an error. 
Though abstract classes cannot be instantiated, we can create subclasses from it. 
We can then access members of the abstract class using the object of the subclass.

The same method declared in the superclass and its subclasses can have different access specifiers. However, there is a restriction.
We can only use those access specifiers in subclasses that provide larger (or like it) access than the access specifier of the superclass.


super.method():
Uses of super keyword
To call methods of the superclass that is overridden in the subclass.
To access attributes (fields) of the superclass if both superclass and subclass have attributes with the same name.
To explicitly call superclass no-arg (default) or parameterized constructor from the subclass constructor.: super(params ou pas);
The parameterized super() must always be the first statement in the body of the constructor of the subclass, 
otherwise, we get a compilation error.


Java Interface:
An interface is a fully abstract class. It includes a group of abstract methods (methods without a body).

We use the interface keyword to create an interface in Java. For example,

interface Language {
  public void getType();

  public void getVersion();
}

their implementation:
interface Polygon {
  void getArea(int length, int breadth);
}

// implement the Polygon interface
class Rectangle implements Polygon {

  // implementation of abstract method
  public void getArea(int length, int breadth) {
    System.out.println("The area of the rectangle is " + (length * breadth));
  }
}
Implementing Multiple Interfaces
In Java, a class can also implement multiple interfaces. For example,

interface A {
  // members of A
}

interface B {
  // members of B
}

// achieving multiple inheritance 
class C implements A, B {
  // abstract members of A
  // abstract members of B
}

interface A {
   ...
}
interface B {
   ... 
}

interface C extends A, B {
   ...
}

 All the methods inside an interface are implicitly public and all fields are implicitly public static final.


we can now add methods with implementation inside an interface. These methods are called default methods.
To declare default methods inside interfaces, we use the default keyword. For example,

public default void getSides() {
   // body of getSides()
}

